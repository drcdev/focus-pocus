(() => {
  'use strict';
  
  // Utility function for safe property access - eliminates redundant try-catch blocks
  function safeGet(obj, prop, defaultValue = null) {
    try {
      // OmniFocus 4 requires function call syntax for property access
      const value = obj[prop]();
      return value !== undefined ? value : defaultValue;
    } catch (e) {
      // Fallback to direct property access for compatibility
      try {
        const directValue = obj[prop];
        return directValue !== undefined ? directValue : defaultValue;
      } catch (e2) {
        return defaultValue;
      }
    }
  }
  
  // Utility function for safe date conversion
  function safeDate(dateValue) {
    if (!dateValue) return null;
    try {
      return dateValue.toISOString();
    } catch (e) {
      return null;
    }
  }
  
  try {
    const app = Application('OmniFocus');
    app.includeStandardAdditions = true;
    
    if (!app.running()) {
      throw new Error('OmniFocus is not running');
    }
    
    const taskId = {{taskId}};
    if (!taskId) {
      throw new Error('Task ID is required');
    }
    
    const doc = app.defaultDocument;
    
    // Find the task using efficient byId method
    let task = null;
    try {
      task = doc.flattenedTasks.byId(taskId);
      if (!task || !safeGet(task, 'id')) {
        throw new Error('Task not found');
      }
    } catch (e) {
      return JSON.stringify({
        error: true,
        message: 'Task not found',
        code: 'NOT_FOUND'
      });
    }
    
    // Get task details before deletion with safe property access
    const taskName = safeGet(task, 'name', 'Unknown Task');
    let projectId = null;
    
    const container = safeGet(task, 'containingProject');
    if (container) {
      projectId = safeGet(container, 'id');
    }
    
    // Delete the task using proper OmniFocus method
    try {
      // Try the official drop method first
      task.drop();
    } catch (e) {
      try {
        // Try deleteObject as alternative
        deleteObject(task);
      } catch (e2) {
        // Try the delete method as fallback
        task.delete();
      }
    }
    
    return JSON.stringify({
      success: true,
      message: 'Task ' + taskName + ' deleted successfully',
      taskName: taskName,
      projectId: projectId
    });
    
  } catch (error) {
    return JSON.stringify({
      error: true,
      message: error.message,
      code: 'SCRIPT_ERROR'
    });
  }
})();