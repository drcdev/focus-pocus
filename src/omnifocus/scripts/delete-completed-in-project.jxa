(() => {
  'use strict';
  
  // Utility function for safe property access - eliminates redundant try-catch blocks
  function safeGet(obj, prop, defaultValue = null) {
    try {
      // Direct property access is faster and more reliable in OmniFocus 4
      const value = obj[prop];
      return value !== undefined ? value : defaultValue;
    } catch (e) {
      return defaultValue;
    }
  }
  
  // Utility function for safe date conversion
  function safeDate(dateValue) {
    if (!dateValue) return null;
    try {
      return dateValue.toISOString();
    } catch (e) {
      return null;
    }
  }
  
  try {
    const app = Application('OmniFocus');
    app.includeStandardAdditions = true;
    
    if (!app.running()) {
      throw new Error('OmniFocus is not running');
    }
    
    const projectId = {{projectId}};
    if (!projectId) {
      throw new Error('Project ID is required');
    }
    
    const doc = app.defaultDocument;
    
    // Find the project
    let project = null;
    try {
      project = doc.flattenedProjects.byId(projectId);
      if (!project || !safeGet(project, 'id')) {
        throw new Error('Project not found');
      }
    } catch (e) {
      return JSON.stringify({
        error: true,
        message: 'Project not found',
        code: 'NOT_FOUND'
      });
    }
    
    // Get completed tasks in the project
    const completedTasks = project.flattenedTasks.whose({ completed: true });
    const count = completedTasks.length;
    
    // Delete all completed tasks in the project
    for (let i = completedTasks.length - 1; i >= 0; i--) {
      completedTasks[i].delete();
    }
    
    return JSON.stringify({
      success: true,
      deletedCount: count
    });
    
  } catch (error) {
    return JSON.stringify({
      error: true,
      message: error.message,
      code: 'SCRIPT_ERROR',
      deletedCount: 0
    });
  }
})();