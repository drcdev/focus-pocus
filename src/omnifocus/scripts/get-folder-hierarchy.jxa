(() => {
  'use strict';
  
  // Utility function for safe property access - eliminates redundant try-catch blocks
  function safeGet(obj, prop, defaultValue = null) {
    try {
      // Direct property access is faster and more reliable in OmniFocus 4
      const value = obj[prop];
      return value !== undefined ? value : defaultValue;
    } catch (e) {
      return defaultValue;
    }
  }
  
  // Utility function for safe date conversion
  function safeDate(dateValue) {
    if (!dateValue) return null;
    try {
      return dateValue.toISOString();
    } catch (e) {
      return null;
    }
  }
  
  try {
    const app = Application('OmniFocus');
    app.includeStandardAdditions = true;
    
    if (!app.running()) {
      throw new Error('OmniFocus is not running');
    }
    
    const doc = app.defaultDocument;
    
    function buildFolderTree(container) {
      const folders = [];
      
      const containerFolders = safeGet(container, 'folders');
      if (containerFolders) {
        for (let i = 0; i < containerFolders.length; i++) {
          const folder = containerFolders[i];
          try {
            const folderData = {
              id: safeGet(folder, 'id'),
              name: safeGet(folder, 'name'),
              parentFolderId: null,
              projectCount: 0,
              folderCount: 0,
              children: []
            };
            
            // Get parent folder safely
            const folderContainer = safeGet(folder, 'container');
            if (folderContainer && safeGet(folderContainer, 'class') === 'folder') {
              folderData.parentFolderId = safeGet(folderContainer, 'id');
            }
            
            // Get counts safely
            const projects = safeGet(folder, 'projects');
            const subfolders = safeGet(folder, 'folders');
            folderData.projectCount = projects ? projects.length : 0;
            folderData.folderCount = subfolders ? subfolders.length : 0;
            
            // Get children recursively
            try {
              folderData.children = buildFolderTree(folder);
            } catch (e) {
              // Children might fail to load
            }
            
            folders.push(folderData);
          } catch (e) {
            // Skip folder if it fails to process
          }
        }
      }
      
      return folders;
    }
    
    const result = buildFolderTree(doc);
    return JSON.stringify(result);
    
  } catch (error) {
    return JSON.stringify({
      error: true,
      message: error.message,
      code: 'SCRIPT_ERROR'
    });
  }
})();