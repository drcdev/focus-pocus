(() => {
  'use strict';
  
  // Utility function for safe property access - eliminates redundant try-catch blocks
  function safeGet(obj, prop, defaultValue = null) {
    try {
      // OmniFocus 4 requires function call syntax for property access
      const value = obj[prop]();
      return value !== undefined ? value : defaultValue;
    } catch (e) {
      // Fallback to direct property access for compatibility
      try {
        const directValue = obj[prop];
        return directValue !== undefined ? directValue : defaultValue;
      } catch (e2) {
        return defaultValue;
      }
    }
  }
  
  // Utility function for safe date conversion
  function safeDate(dateValue) {
    if (!dateValue) return null;
    try {
      return dateValue.toISOString();
    } catch (e) {
      return null;
    }
  }
  
  try {
    const app = Application('OmniFocus');
    app.includeStandardAdditions = true;
    
    if (!app.running()) {
      throw new Error('OmniFocus is not running');
    }
    
    const doc = app.defaultDocument;
    
    function buildTagTree(container) {
      const tags = [];
      
      const containerTags = safeGet(container, 'tags');
      if (containerTags) {
        for (let i = 0; i < containerTags.length; i++) {
          const tag = containerTags[i];
          try {
            const tagData = {
              id: safeGet(tag, 'id'),
              name: safeGet(tag, 'name'),
              parentTagId: null,
              availableTaskCount: 0,
              remainingTaskCount: 0,
              children: []
            };
            
            // Get parent tag safely
            const tagContainer = safeGet(tag, 'container');
            if (tagContainer && safeGet(tagContainer, 'class') === 'tag') {
              tagData.parentTagId = safeGet(tagContainer, 'id');
            }
            
            // Get task counts safely
            tagData.availableTaskCount = safeGet(tag, 'availableTaskCount', 0);
            tagData.remainingTaskCount = safeGet(tag, 'remainingTaskCount', 0);
            
            // Get children recursively
            try {
              tagData.children = buildTagTree(tag);
            } catch (e) {
              // Children might fail to load
            }
            
            tags.push(tagData);
          } catch (e) {
            // Skip tag if it fails to process
          }
        }
      }
      
      return tags;
    }
    
    const result = buildTagTree(doc);
    return JSON.stringify(result);
    
  } catch (error) {
    return JSON.stringify({
      error: true,
      message: error.message,
      code: 'SCRIPT_ERROR'
    });
  }
})();