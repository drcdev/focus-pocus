(() => {
  'use strict';
  
  try {
    const app = Application('OmniFocus');
    app.includeStandardAdditions = true;
    
    if (!app.running()) {
      throw new Error('OmniFocus is not running');
    }
    
    const doc = app.defaultDocument;
    
    function buildTagTree(container) {
      const tags = [];
      
      try {
        const containerTags = container.tags();
        
        for (let i = 0; i < containerTags.length; i++) {
          const tag = containerTags[i];
          try {
            const tagData = {
              id: tag.id(),
              name: tag.name(),
              parentTagId: null,
              availableTaskCount: 0,
              remainingTaskCount: 0,
              children: []
            };
            
            // Get parent tag safely
            try {
              const tagContainer = tag.container();
              if (tagContainer && tagContainer.class() === 'tag') {
                tagData.parentTagId = tagContainer.id();
              }
            } catch (e) {
              // Container might not exist
            }
            
            // Get task counts safely
            try {
              tagData.availableTaskCount = tag.availableTaskCount();
              tagData.remainingTaskCount = tag.remainingTaskCount();
            } catch (e) {
              // Task counts might fail
            }
            
            // Get children recursively
            try {
              tagData.children = buildTagTree(tag);
            } catch (e) {
              // Children might fail to load
            }
            
            tags.push(tagData);
          } catch (e) {
            // Skip tag if it fails to process
          }
        }
      } catch (e) {
        // Container tags might fail to load
      }
      
      return tags;
    }
    
    const result = buildTagTree(doc);
    return JSON.stringify(result);
    
  } catch (error) {
    return JSON.stringify({
      error: true,
      message: error.message,
      code: 'SCRIPT_ERROR'
    });
  }
})();