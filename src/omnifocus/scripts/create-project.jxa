(() => {
  'use strict';
  
  // Utility function for safe property access - eliminates redundant try-catch blocks
  function safeGet(obj, prop, defaultValue = null) {
    try {
      // Direct property access is faster and more reliable in OmniFocus 4
      const value = obj[prop];
      return value !== undefined ? value : defaultValue;
    } catch (e) {
      return defaultValue;
    }
  }
  
  // Utility function for safe date conversion
  function safeDate(dateValue) {
    if (!dateValue) return null;
    try {
      return dateValue.toISOString();
    } catch (e) {
      return null;
    }
  }
  
  try {
    const app = Application('OmniFocus');
    app.includeStandardAdditions = true;
    
    if (!app.running()) {
      throw new Error('OmniFocus is not running');
    }
    
    const options = {{options}};
    const doc = app.defaultDocument;
    
    // Build project properties
    const projectProps = {
      name: options.name
    };
    
    if (options.note) projectProps.note = options.note;
    if (options.dueDate) projectProps.dueDate = new Date(options.dueDate);
    if (options.deferDate) projectProps.deferDate = new Date(options.deferDate);
    
    // Create project using proper JXA syntax
    const newProject = app.Project(projectProps);
    
    // Add to appropriate container
    if (options.folderId) {
      const folder = doc.flattenedFolders.byId(options.folderId);
      if (folder) {
        folder.projects.push(newProject);
      } else {
        doc.projects.push(newProject);
      }
    } else {
      doc.projects.push(newProject);
    }
    
    // Handle status after creation - some statuses require special methods
    if (options.status) {
      if (options.status === 'done status') {
        newProject.markComplete();
      } else if (options.status === 'dropped status') {
        newProject.markDropped();
      } else {
        // Direct assignment works for 'active status' and 'on hold status'
        newProject.status = options.status;
      }
    }
    
    // Return project data - use try-catch for each property to handle conversion errors
    const result = {};
    
    try { 
      const projectId = newProject.id();
      if (projectId) result.id = projectId;
    } catch (e) { 
      result.id = null;
    }
    try { result.name = newProject.name(); } catch (e) { result.name = 'Unknown Project'; }
    try { result.note = newProject.note() || null; } catch (e) { result.note = null; }
    try { result.status = newProject.status(); } catch (e) { result.status = 'active'; }
    try { result.creationDate = newProject.creationDate() ? newProject.creationDate().toISOString() : new Date().toISOString(); } catch (e) { result.creationDate = new Date().toISOString(); }
    try { result.modificationDate = newProject.modificationDate() ? newProject.modificationDate().toISOString() : new Date().toISOString(); } catch (e) { result.modificationDate = new Date().toISOString(); }
    try { result.dueDate = newProject.dueDate() ? newProject.dueDate().toISOString() : null; } catch (e) { result.dueDate = null; }
    try { result.deferDate = newProject.deferDate() ? newProject.deferDate().toISOString() : null; } catch (e) { result.deferDate = null; }
    try { result.estimatedMinutes = newProject.estimatedMinutes() || null; } catch (e) { result.estimatedMinutes = null; }
    try { result.flagged = newProject.flagged(); } catch (e) { result.flagged = false; }
    
    result.tags = [];
    result.taskCount = 0;
    result.completedTaskCount = 0;
    result.remainingTaskCount = 0;
    result.nextTaskId = null;
    
    // Get folder ID from the project's container
    try {
      const container = newProject.folder();
      if (container && container.id) {
        result.folderId = container.id();
      } else {
        result.folderId = options.folderId || null;
      }
    } catch (e) {
      result.folderId = options.folderId || null;
    }
    
    return JSON.stringify(result);
    
  } catch (error) {
    return JSON.stringify({
      error: true,
      message: error.message,
      code: 'SCRIPT_ERROR'
    });
  }
})();
