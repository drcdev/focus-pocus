(() => {
  'use strict';
  
  // Utility function for safe property access - eliminates redundant try-catch blocks
  function safeGet(obj, prop, defaultValue = null) {
    try {
      // OmniFocus 4 requires function call syntax for property access
      const value = obj[prop]();
      return value !== undefined ? value : defaultValue;
    } catch (e) {
      // Fallback to direct property access for compatibility
      try {
        const directValue = obj[prop];
        return directValue !== undefined ? directValue : defaultValue;
      } catch (e2) {
        return defaultValue;
      }
    }
  }
  
  // Utility function for safe date conversion
  function safeDate(dateValue) {
    if (!dateValue) return null;
    try {
      return dateValue.toISOString();
    } catch (e) {
      return null;
    }
  }
  
  try {
    const app = Application('OmniFocus');
    app.includeStandardAdditions = true;
    
    if (!app.running()) {
      throw new Error('OmniFocus is not running');
    }
    
    const taskIds = {{taskIds}};
    const updates = {{updates}};
    const doc = app.defaultDocument;
    
    const results = [];
    
    for (const taskId of taskIds) {
      try {
        const task = doc.flattenedTasks.byId(taskId);
        if (!task || !safeGet(task, 'id')) {
          continue; // Skip non-existent tasks
        }
        
        // Apply updates
        if (updates.name !== undefined) task.name = updates.name;
        if (updates.note !== undefined) task.note = updates.note;
        if (updates.flagged !== undefined) task.flagged = updates.flagged;
        if (updates.dueDate !== undefined) task.dueDate = updates.dueDate ? new Date(updates.dueDate) : null;
        if (updates.deferDate !== undefined) task.deferDate = updates.deferDate ? new Date(updates.deferDate) : null;
        if (updates.estimatedMinutes !== undefined) task.estimatedMinutes = updates.estimatedMinutes;
        if (updates.repetitionRule !== undefined) task.repetitionRule = updates.repetitionRule;
        
        // Build result
        const result = {
          id: safeGet(task, 'id'),
          name: safeGet(task, 'name'),
          note: safeGet(task, 'note'),
          completed: safeGet(task, 'completed', false),
          completionDate: safeDate(safeGet(task, 'completionDate')),
          creationDate: safeDate(safeGet(task, 'creationDate')),
          modificationDate: safeDate(safeGet(task, 'modificationDate')),
          dueDate: safeDate(safeGet(task, 'dueDate')),
          deferDate: safeDate(safeGet(task, 'deferDate')),
          estimatedMinutes: safeGet(task, 'estimatedMinutes'),
          flagged: safeGet(task, 'flagged', false),
          tags: [],
          projectId: null,
          parentTaskId: null,
          containingProjectInfo: null
        };
        
        // Get tags
        const taskTags = safeGet(task, 'tags');
        if (taskTags && taskTags.length > 0) {
          for (let j = 0; j < taskTags.length; j++) {
            const tagName = safeGet(taskTags[j], 'name');
            if (tagName) {
              result.tags.push(tagName);
            }
          }
        }
        
        // Get containing project
        const containingProject = safeGet(task, 'containingProject');
        if (containingProject) {
          result.projectId = safeGet(containingProject, 'id');
          result.containingProjectInfo = {
            id: safeGet(containingProject, 'id'),
            name: safeGet(containingProject, 'name'),
            status: safeGet(containingProject, 'status')
          };
        }
        
        results.push(result);
      } catch (e) {
        // Continue with other tasks if one fails
      }
    }
    
    return JSON.stringify(results);
    
  } catch (error) {
    return JSON.stringify({
      error: true,
      message: error.message,
      code: 'SCRIPT_ERROR'
    });
  }
})();