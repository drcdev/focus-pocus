(() => {
  'use strict';
  
  try {
    const app = Application('OmniFocus');
    app.includeStandardAdditions = true;
    
    if (!app.running()) {
      throw new Error('OmniFocus is not running');
    }
    
    const taskIds = {{taskIds}};
    const updates = {{updates}};
    const doc = app.defaultDocument;
    
    const results = [];
    
    for (const taskId of taskIds) {
      try {
        const task = doc.flattenedTasks.byId(taskId);
        if (!task || !task.id()) {
          continue; // Skip non-existent tasks
        }
        
        // Apply updates
        if (updates.name !== undefined) task.name = updates.name;
        if (updates.note !== undefined) task.note = updates.note;
        if (updates.flagged !== undefined) task.flagged = updates.flagged;
        if (updates.dueDate !== undefined) task.dueDate = updates.dueDate ? new Date(updates.dueDate) : null;
        if (updates.deferDate !== undefined) task.deferDate = updates.deferDate ? new Date(updates.deferDate) : null;
        if (updates.estimatedMinutes !== undefined) task.estimatedMinutes = updates.estimatedMinutes;
        if (updates.repetitionRule !== undefined) task.repetitionRule = updates.repetitionRule;
        
        // Build result
        const result = {
          id: task.id(),
          name: task.name(),
          note: task.note() || null,
          completed: task.completed(),
          completionDate: task.completionDate() ? task.completionDate().toISOString() : null,
          creationDate: task.creationDate().toISOString(),
          modificationDate: task.modificationDate().toISOString(),
          dueDate: task.dueDate() ? task.dueDate().toISOString() : null,
          deferDate: task.deferDate() ? task.deferDate().toISOString() : null,
          estimatedMinutes: task.estimatedMinutes() || null,
          flagged: task.flagged(),
          repetitionRule: task.repetitionRule() ? task.repetitionRule().toString() : null,
          tags: [],
          projectId: null,
          parentTaskId: null,
          containingProjectInfo: null
        };
        
        // Get tags
        const taskTags = task.tags();
        if (taskTags && taskTags.length > 0) {
          for (let j = 0; j < taskTags.length; j++) {
            result.tags.push(taskTags[j].name());
          }
        }
        
        // Get containing project
        try {
          const containingProject = task.containingProject();
          if (containingProject) {
            result.projectId = containingProject.id();
            result.containingProjectInfo = {
              id: containingProject.id(),
              name: containingProject.name(),
              status: containingProject.status()
            };
          }
        } catch (e) {
          // Project info might not be accessible
        }
        
        results.push(result);
      } catch (e) {
        // Continue with other tasks if one fails
      }
    }
    
    return JSON.stringify(results);
    
  } catch (error) {
    return JSON.stringify({
      error: true,
      message: error.message,
      code: 'SCRIPT_ERROR'
    });
  }
})();