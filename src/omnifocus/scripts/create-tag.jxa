(() => {
  'use strict';
  
  // Utility function for safe property access - eliminates redundant try-catch blocks
  function safeGet(obj, prop, defaultValue = null) {
    try {
      // Direct property access is faster and more reliable in OmniFocus 4
      const value = obj[prop];
      return value !== undefined ? value : defaultValue;
    } catch (e) {
      return defaultValue;
    }
  }
  
  // Utility function for safe date conversion
  function safeDate(dateValue) {
    if (!dateValue) return null;
    try {
      return dateValue.toISOString();
    } catch (e) {
      return null;
    }
  }
  
  try {
    const app = Application('OmniFocus');
    app.includeStandardAdditions = true;
    
    if (!app.running()) {
      throw new Error('OmniFocus is not running');
    }
    
    const name = {{name}};
    const parentTagId = {{parentTagId}};
    const doc = app.defaultDocument;
    
    if (!name) {
      throw new Error('Tag name is required');
    }
    
    // Create tag properties
    const tagProps = { name: name };
    
    // Create tag using proper JXA syntax
    const newTag = app.Tag(tagProps);
    
    // Add to appropriate container
    if (parentTagId) {
      // Create as child of parent tag
      try {
        const parentTag = doc.flattenedTags.byId(parentTagId);
        if (!parentTag || !parentTag.id) {
          throw new Error('Parent tag not found');
        }
        parentTag.tags.push(newTag);
      } catch (e) {
        return JSON.stringify({
          error: true,
          message: 'Parent tag not found',
          code: 'NOT_FOUND'
        });
      }
    } else {
      // Create as root tag
      doc.tags.push(newTag);
    }
    
    // Return tag data - use try-catch for each property to handle conversion errors
    const result = {
      id: null,
      name: name, // Use the original name as fallback
      available: true,
      allowsNextAction: true
    };
    
    // Try to get actual properties but keep fallbacks
    try { 
      const tagId = newTag.id();
      if (tagId) result.id = tagId;
    } catch (e) { 
      result.id = null;
    }
    
    try { 
      const tagName = newTag.name();
      if (tagName) result.name = tagName;
    } catch (e) { /* Use fallback */ }
    
    try { 
      const available = newTag.available();
      if (available !== undefined) result.available = available;
    } catch (e) { /* Use fallback */ }
    
    try { 
      const allowsNextAction = newTag.allowsNextAction();
      if (allowsNextAction !== undefined) result.allowsNextAction = allowsNextAction;
    } catch (e) { /* Use fallback */ }
    
    return JSON.stringify(result);
    
  } catch (error) {
    return JSON.stringify({
      error: true,
      message: error.message,
      code: 'SCRIPT_ERROR'
    });
  }
})();