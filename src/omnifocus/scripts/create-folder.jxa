(() => {
  'use strict';
  
  // Utility function for safe property access - eliminates redundant try-catch blocks
  function safeGet(obj, prop, defaultValue = null) {
    try {
      // OmniFocus 4 requires function call syntax for property access
      const value = obj[prop]();
      return value !== undefined ? value : defaultValue;
    } catch (e) {
      // Fallback to direct property access for compatibility
      try {
        const directValue = obj[prop];
        return directValue !== undefined ? directValue : defaultValue;
      } catch (e2) {
        return defaultValue;
      }
    }
  }
  
  // Utility function for safe date conversion
  function safeDate(dateValue) {
    if (!dateValue) return null;
    try {
      return dateValue.toISOString();
    } catch (e) {
      return null;
    }
  }
  
  try {
    const app = Application('OmniFocus');
    app.includeStandardAdditions = true;
    
    if (!app.running()) {
      throw new Error('OmniFocus is not running');
    }
    
    const name = {{name}};
    const parentFolderId = {{parentFolderId}};
    const doc = app.defaultDocument;
    
    // Determine container
    let container = doc;
    if (parentFolderId) {
      const parentFolder = doc.flattenedFolders.byId(parentFolderId);
      if (parentFolder && safeGet(parentFolder, 'id')) {
        container = parentFolder;
      }
    }
    
    // Create folder
    const newFolder = app.Folder({
      name: name
    });
    container.folders.push(newFolder);
    
    // Find the created folder by name (safer approach for OmniFocus 4)
    let folder = null;
    const folders = safeGet(container, 'folders');
    if (folders) {
      for (let i = 0; i < folders.length; i++) {
        const f = folders[i];
        if (safeGet(f, 'name') === name) {
          folder = f;
          break;
        }
      }
    } else {
      throw new Error('Failed to locate created folder');
    }
    
    if (!folder) {
      throw new Error('Folder creation succeeded but folder not found');
    }
    
    const result = {
      id: null,
      name: null,
      parentFolderId: null,
      projectCount: 0,
      folderCount: 0
    };
    
    // Get folder properties safely
    result.id = safeGet(folder, 'id', 'unknown-id-' + Date.now());
    result.name = safeGet(folder, 'name', name);
    
    // Get parent folder ID safely
    const folderContainer = safeGet(folder, 'container');
    if (folderContainer && safeGet(folderContainer, 'class') === 'folder') {
      result.parentFolderId = safeGet(folderContainer, 'id');
    }
    
    // Get counts safely
    const projects = safeGet(folder, 'projects');
    const subfolders = safeGet(folder, 'folders');
    result.projectCount = projects ? projects.length : 0;
    result.folderCount = subfolders ? subfolders.length : 0;
    
    return JSON.stringify(result);
    
  } catch (error) {
    return JSON.stringify({
      error: true,
      message: error.message,
      code: 'SCRIPT_ERROR'
    });
  }
})();