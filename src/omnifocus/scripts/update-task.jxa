(() => {
  'use strict';
  
  // Utility function for safe property access - eliminates redundant try-catch blocks
  function safeGet(obj, prop, defaultValue = null) {
    try {
      // Direct property access is faster and more reliable in OmniFocus 4
      const value = obj[prop];
      return value !== undefined ? value : defaultValue;
    } catch (e) {
      return defaultValue;
    }
  }
  
  // Utility function for safe date conversion
  function safeDate(dateValue) {
    if (!dateValue) return null;
    try {
      return dateValue.toISOString();
    } catch (e) {
      return null;
    }
  }
  
  try {
    const app = Application('OmniFocus');
    app.includeStandardAdditions = true;
    
    if (!app.running()) {
      throw new Error('OmniFocus is not running');
    }
    
    const taskId = {{taskId}};
    const updates = {{updates}};
    
    if (!taskId) {
      throw new Error('Task ID is required');
    }
    
    const doc = app.defaultDocument;
    
    // Find the task
    let task = null;
    try {
      task = doc.flattenedTasks.byId(taskId);
      if (!task || !task.id) {
        throw new Error('Task not found');
      }
    } catch (e) {
      return JSON.stringify({
        error: true,
        message: 'Task not found',
        code: 'NOT_FOUND'
      });
    }
    
    // Apply updates
    if (updates.name !== undefined) task.name = updates.name;
    if (updates.note !== undefined) task.note = updates.note;
    if (updates.flagged !== undefined) task.flagged = updates.flagged;
    if (updates.dueDate !== undefined) {
      if (updates.dueDate) {
        try {
          const dueDate = new Date(updates.dueDate);
          if (!isNaN(dueDate.getTime())) {
            task.dueDate = dueDate;
          }
        } catch (e) {
          // Invalid date, skip setting
        }
      } else {
        task.dueDate = null;
      }
    }
    if (updates.deferDate !== undefined) {
      if (updates.deferDate) {
        try {
          const deferDate = new Date(updates.deferDate);
          if (!isNaN(deferDate.getTime())) {
            task.deferDate = deferDate;
          }
        } catch (e) {
          // Invalid date, skip setting
        }
      } else {
        task.deferDate = null;
      }
    }
    if (updates.estimatedMinutes !== undefined) task.estimatedMinutes = updates.estimatedMinutes;
    if (updates.repetitionRule !== undefined) task.repetitionRule = updates.repetitionRule;
    
    // Return updated task data - using utility functions
    const result = {
      id: safeGet(task, 'id'),
      name: safeGet(task, 'name', 'Unknown Task'),
      note: safeGet(task, 'note'),
      completed: safeGet(task, 'completed', false),
      completionDate: safeDate(safeGet(task, 'completionDate')),
      creationDate: safeDate(safeGet(task, 'creationDate')),
      modificationDate: safeDate(safeGet(task, 'modificationDate')),
      dueDate: safeDate(safeGet(task, 'dueDate')),
      deferDate: safeDate(safeGet(task, 'deferDate')),
      estimatedMinutes: safeGet(task, 'estimatedMinutes'),
      flagged: safeGet(task, 'flagged', false),
      repetitionRule: null, // OmniFocus 4 JXA API doesn't reliably expose repetition rules
      tags: [],
      projectId: null,
      parentTaskId: null,
      containingProjectInfo: null
    };
    
    // Get tags
    const taskTags = safeGet(task, 'tags');
    if (taskTags && taskTags.length > 0) {
      for (let j = 0; j < taskTags.length; j++) {
        const tagName = safeGet(taskTags[j], 'name');
        if (tagName) result.tags.push(tagName);
      }
    }
    
    // Get containing project
    const containingProject = safeGet(task, 'containingProject');
    if (containingProject) {
      result.projectId = safeGet(containingProject, 'id');
      const projectName = safeGet(containingProject, 'name');
      const projectStatus = safeGet(containingProject, 'status');
      if (result.projectId) {
        result.containingProjectInfo = {
          id: result.projectId,
          name: projectName,
          status: projectStatus
        };
      }
    }
    
    return JSON.stringify(result);
    
  } catch (error) {
    return JSON.stringify({
      error: true,
      message: error.message,
      code: 'SCRIPT_ERROR'
    });
  }
})();