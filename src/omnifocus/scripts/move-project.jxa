(() => {
  'use strict';
  
  // Utility function for safe property access - eliminates redundant try-catch blocks
  function safeGet(obj, prop, defaultValue = null) {
    try {
      // Direct property access is faster and more reliable in OmniFocus 4
      const value = obj[prop];
      return value !== undefined ? value : defaultValue;
    } catch (e) {
      return defaultValue;
    }
  }
  
  // Utility function for safe date conversion
  function safeDate(dateValue) {
    if (!dateValue) return null;
    try {
      return dateValue.toISOString();
    } catch (e) {
      return null;
    }
  }
  
  try {
    const app = Application('OmniFocus');
    app.includeStandardAdditions = true;
    
    if (!app.running()) {
      throw new Error('OmniFocus is not running');
    }
    
    const projectId = {{projectId}};
    const targetFolderId = {{targetFolderId}};
    const doc = app.defaultDocument;
    
    const project = doc.flattenedProjects.byId(projectId);
    if (!project || !safeGet(project, 'id')) {
      throw new Error('Project not found');
    }
    
    // Determine target container and move project  
    if (targetFolderId && targetFolderId !== null && targetFolderId !== 'null' && targetFolderId !== undefined && targetFolderId !== 'undefined') {
      const targetFolder = doc.flattenedFolders.byId(targetFolderId);
      if (!targetFolder || !safeGet(targetFolder, 'id')) {
        throw new Error('Target folder not found');
      }
      // Move project to folder by setting container
      try {
        project.container = targetFolder;
      } catch (e) {
        throw new Error('Failed to move project to folder: ' + e.message);
      }
    } else {
      // Move to root by setting container to document
      try {
        project.container = doc;
      } catch (e) {
        throw new Error('Failed to move project to root: ' + e.message);
      }
    }
    
    // Build result
    const result = {
      id: safeGet(project, 'id'),
      name: safeGet(project, 'name'),
      note: safeGet(project, 'note', ''),
      status: safeGet(project, 'status'),
      flagged: safeGet(project, 'flagged', false),
      dueDate: safeDate(safeGet(project, 'dueDate')),
      deferDate: safeDate(safeGet(project, 'deferDate')),
      completionDate: safeDate(safeGet(project, 'completionDate')),
      sequential: safeGet(project, 'sequential', false),
      estimatedMinutes: safeGet(project, 'estimatedMinutes'),
      folderId: null,
      taskCount: 0,
      availableTaskCount: 0,
      tags: []
    };
    
    // Get folder ID safely
    const container = safeGet(project, 'container');
    if (container && safeGet(container, 'class') === 'folder') {
      result.folderId = safeGet(container, 'id');
    }
    
    // Get task counts safely
    const tasks = safeGet(project, 'tasks');
    const availableTasks = safeGet(project, 'availableTasks');
    result.taskCount = tasks ? tasks.length : 0;
    result.availableTaskCount = availableTasks ? availableTasks.length : 0;
    
    // Get tags safely
    const projectTags = safeGet(project, 'tags');
    if (projectTags) {
      for (let i = 0; i < projectTags.length; i++) {
        const tagId = safeGet(projectTags[i], 'id');
        const tagName = safeGet(projectTags[i], 'name');
        if (tagId && tagName) {
          result.tags.push({ id: tagId, name: tagName });
        }
      }
    }
    
    return JSON.stringify(result);
    
  } catch (error) {
    return JSON.stringify({
      error: true,
      message: error.message,
      code: 'SCRIPT_ERROR'
    });
  }
})();