(() => {
  'use strict';
  
  // Utility function for safe property access - eliminates redundant try-catch blocks
  function safeGet(obj, prop, defaultValue = null) {
    try {
      // OmniFocus 4 requires function call syntax for property access
      const value = obj[prop]();
      return value !== undefined ? value : defaultValue;
    } catch (e) {
      // Fallback to direct property access for compatibility
      try {
        const directValue = obj[prop];
        return directValue !== undefined ? directValue : defaultValue;
      } catch (e2) {
        return defaultValue;
      }
    }
  }
  
  // Utility function for safe date conversion
  function safeDate(dateValue) {
    if (!dateValue) return null;
    try {
      return dateValue.toISOString();
    } catch (e) {
      return null;
    }
  }
  
  try {
    const app = Application('OmniFocus');
    app.includeStandardAdditions = true;
    
    if (!app.running()) {
      throw new Error('OmniFocus is not running');
    }
    
    const taskId = {{taskId}};
    const completionDate = {{completionDate}};
    
    if (!taskId) {
      throw new Error('Task ID is required');
    }
    
    const doc = app.defaultDocument;
    
    // Find the task
    let task = null;
    try {
      task = doc.flattenedTasks.byId(taskId);
      if (!task || !safeGet(task, 'id')) {
        throw new Error('Task not found');
      }
    } catch (e) {
      return JSON.stringify({
        error: true,
        message: 'Task not found',
        code: 'NOT_FOUND'
      });
    }
    
    // Complete the task using the markComplete method instead of direct property assignment
    try {
      task.markComplete(completionDate ? new Date(completionDate) : new Date());
    } catch (e) {
      // If markComplete doesn't work, try direct property assignment
      try {
        task.completed = true;
        if (completionDate) {
          task.completionDate = new Date(completionDate);
        }
      } catch (e2) {
        throw new Error('Cannot complete task: ' + e2.message);
      }
    }
    
    // Return updated task data using safeGet for conversion errors
    const result = {
      id: safeGet(task, 'id'),
      name: safeGet(task, 'name', 'Unknown Task'),
      note: safeGet(task, 'note'),
      completed: safeGet(task, 'completed', true),
      completionDate: safeDate(safeGet(task, 'completionDate')),
      creationDate: safeDate(safeGet(task, 'creationDate')),
      modificationDate: safeDate(safeGet(task, 'modificationDate')),
      dueDate: safeDate(safeGet(task, 'dueDate')),
      deferDate: safeDate(safeGet(task, 'deferDate')),
      estimatedMinutes: safeGet(task, 'estimatedMinutes'),
      flagged: safeGet(task, 'flagged', false),
      repetitionRule: null // OmniFocus 4 JXA API doesn't reliably expose repetition rules
    };
    
    result.tags = [];
    result.projectId = null;
    result.parentTaskId = null;
    result.containingProjectInfo = null;
    
    // Get tags
    const taskTags = safeGet(task, 'tags');
    if (taskTags && taskTags.length > 0) {
      for (let j = 0; j < taskTags.length; j++) {
        const tagName = safeGet(taskTags[j], 'name');
        if (tagName) {
          result.tags.push(tagName);
        }
      }
    }
    
    // Get containing project
    const containingProject = safeGet(task, 'containingProject');
    if (containingProject) {
      result.projectId = safeGet(containingProject, 'id');
      const projectId = safeGet(containingProject, 'id');
      const projectName = safeGet(containingProject, 'name');
      const projectStatus = safeGet(containingProject, 'status');
      if (projectId && projectName && projectStatus) {
        result.containingProjectInfo = {
          id: projectId,
          name: projectName,
          status: projectStatus
        };
      }
    }
    
    return JSON.stringify(result);
    
  } catch (error) {
    return JSON.stringify({
      error: true,
      message: error.message,
      code: 'SCRIPT_ERROR'
    });
  }
})();