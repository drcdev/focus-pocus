(() => {
  'use strict';
  
  try {
    const app = Application('OmniFocus');
    app.includeStandardAdditions = true;
    
    if (!app.running()) {
      throw new Error('OmniFocus is not running');
    }
    
    const taskId = {{taskId}};
    const completionDate = {{completionDate}};
    
    if (!taskId) {
      throw new Error('Task ID is required');
    }
    
    const doc = app.defaultDocument;
    
    // Find the task
    let task = null;
    try {
      task = doc.flattenedTasks.byId(taskId);
      if (!task || !task.id()) {
        throw new Error('Task not found');
      }
    } catch (e) {
      return JSON.stringify({
        error: true,
        message: 'Task not found',
        code: 'NOT_FOUND'
      });
    }
    
    // Complete the task
    task.completed = true;
    if (completionDate) {
      task.completionDate = new Date(completionDate);
    } else {
      task.completionDate = new Date();
    }
    
    // Return updated task data
    const result = {
      id: task.id(),
      name: task.name(),
      note: task.note() || null,
      completed: task.completed(),
      completionDate: task.completionDate() ? task.completionDate().toISOString() : null,
      creationDate: task.creationDate().toISOString(),
      modificationDate: task.modificationDate().toISOString(),
      dueDate: task.dueDate() ? task.dueDate().toISOString() : null,
      deferDate: task.deferDate() ? task.deferDate().toISOString() : null,
      estimatedMinutes: task.estimatedMinutes() || null,
      flagged: task.flagged(),
      repetitionRule: task.repetitionRule() ? task.repetitionRule().toString() : null,
      tags: [],
      projectId: null,
      parentTaskId: null,
      containingProjectInfo: null
    };
    
    // Get tags
    const taskTags = task.tags();
    if (taskTags && taskTags.length > 0) {
      for (let j = 0; j < taskTags.length; j++) {
        result.tags.push(taskTags[j].name());
      }
    }
    
    // Get containing project
    try {
      const containingProject = task.containingProject();
      if (containingProject) {
        result.projectId = containingProject.id();
        result.containingProjectInfo = {
          id: containingProject.id(),
          name: containingProject.name(),
          status: containingProject.status()
        };
      }
    } catch (e) {
      // Project info might not be accessible
    }
    
    return JSON.stringify(result);
    
  } catch (error) {
    return JSON.stringify({
      error: true,
      message: error.message,
      code: 'SCRIPT_ERROR'
    });
  }
})();