(() => {
  'use strict';
  
  // Utility function for safe property access - eliminates redundant try-catch blocks
  function safeGet(obj, prop, defaultValue = null) {
    try {
      // Direct property access is faster and more reliable in OmniFocus 4
      const value = obj[prop];
      return value !== undefined ? value : defaultValue;
    } catch (e) {
      return defaultValue;
    }
  }
  
  // Utility function for safe date conversion
  function safeDate(dateValue) {
    if (!dateValue) return null;
    try {
      return dateValue.toISOString();
    } catch (e) {
      return null;
    }
  }
  
  try {
    const app = Application('OmniFocus');
    app.includeStandardAdditions = true;
    
    if (!app.running()) {
      throw new Error('OmniFocus is not running');
    }
    
    const taskIds = {{taskIds}};
    const doc = app.defaultDocument;
    
    const deleted = [];
    const failed = [];
    const affectedProjects = new Set();
    
    for (const taskId of taskIds) {
      try {
        const task = doc.flattenedTasks.byId(taskId);
        if (!task || !safeGet(task, 'id')) {
          failed.push(taskId);
          continue;
        }
        
        // Track affected projects for cache invalidation
        const container = safeGet(task, 'assignedContainer');
        if (container) {
          const containerId = safeGet(container, 'id');
          if (containerId) {
            affectedProjects.add(containerId);
          }
        }
        
        // Delete the task
        task.delete();
        deleted.push(taskId);
      } catch (e) {
        failed.push(taskId);
      }
    }
    
    return JSON.stringify({
      deleted: deleted,
      failed: failed,
      affectedProjects: Array.from(affectedProjects)
    });
    
  } catch (error) {
    return JSON.stringify({
      error: true,
      message: error.message,
      code: 'SCRIPT_ERROR',
      deleted: [],
      failed: {{taskIds}} || []
    });
  }
})();