(() => {
  'use strict';
  
  try {
    const app = Application('OmniFocus');
    app.includeStandardAdditions = true;
    
    if (!app.running()) {
      throw new Error('OmniFocus is not running');
    }
    
    const projectId = {{projectId}};
    const updates = {{updates}};
    const doc = app.defaultDocument;
    
    const project = doc.flattenedProjects.byId(projectId);
    if (!project || !project.id) {
      throw new Error('Project not found');
    }
    
    // Apply updates safely
    if (updates.name !== undefined) {
      project.name = updates.name;
    }
    if (updates.note !== undefined) {
      project.note = updates.note;
    }
    if (updates.status !== undefined) {
      project.status = updates.status;
    }
    if (updates.flagged !== undefined) {
      project.flagged = updates.flagged;
    }
    if (updates.dueDate !== undefined) {
      project.dueDate = updates.dueDate ? new Date(updates.dueDate) : null;
    }
    if (updates.deferDate !== undefined) {
      project.deferDate = updates.deferDate ? new Date(updates.deferDate) : null;
    }
    if (updates.sequential !== undefined) {
      project.sequential = updates.sequential;
    }
    if (updates.estimatedMinutes !== undefined) {
      project.estimatedMinutes = updates.estimatedMinutes || null;
    }
    
    // Update review interval if provided
    if (updates.reviewInterval) {
      try {
        project.reviewInterval = {
          unit: updates.reviewInterval.unit,
          steps: updates.reviewInterval.steps
        };
      } catch (e) {
        // Review interval update might fail
      }
    }
    
    // Update tags if provided
    if (updates.tags !== undefined) {
      try {
        const tags = [];
        for (const tagId of updates.tags) {
          const tag = doc.flattenedTags.byId(tagId);
          if (tag) tags.push(tag);
        }
        project.tags = tags;
      } catch (e) {
        // Tag update might fail
      }
    }
    
    // Build result with safe property access
    const result = {
      folderId: null,
      taskCount: 0,
      availableTaskCount: 0,
      tags: []
    };
    
    // Use try-catch for each property to handle conversion errors
    try { result.id = project.id; } catch (e) { result.id = null; }
    try { result.name = project.name; } catch (e) { result.name = 'Unknown Project'; }
    try { result.note = project.note || ''; } catch (e) { result.note = ''; }
    try { result.status = project.status; } catch (e) { result.status = null; }
    try { result.flagged = project.flagged; } catch (e) { result.flagged = false; }
    try { result.dueDate = project.dueDate ? project.dueDate.toISOString() : null; } catch (e) { result.dueDate = null; }
    try { result.deferDate = project.deferDate ? project.deferDate.toISOString() : null; } catch (e) { result.deferDate = null; }
    try { result.completionDate = project.completionDate ? project.completionDate.toISOString() : null; } catch (e) { result.completionDate = null; }
    try { result.sequential = project.sequential; } catch (e) { result.sequential = false; }
    try { result.estimatedMinutes = project.estimatedMinutes || null; } catch (e) { result.estimatedMinutes = null; }
    
    // Get folder ID safely
    try {
      const container = project.container;
      if (container && container.class === 'folder') {
        try { result.folderId = container.id; } catch (e) { }
      }
    } catch (e) {
      // Container might not exist
    }
    
    // Get task counts safely
    try {
      const tasks = project.tasks;
      if (tasks) {
        result.taskCount = tasks.length;
      }
    } catch (e) {
      // Task count might fail
    }
    
    try {
      const availableTasks = project.availableTasks;
      if (availableTasks) {
        result.availableTaskCount = availableTasks.length;
      }
    } catch (e) {
      // Available task count might fail
    }
    
    // Get tags safely
    try {
      const projectTags = project.tags;
      if (projectTags && projectTags.length > 0) {
        for (let i = 0; i < projectTags.length; i++) {
          try {
            const tag = projectTags[i];
            const tagData = {};
            try { tagData.id = tag.id; } catch (e) { tagData.id = null; }
            try { tagData.name = tag.name; } catch (e) { tagData.name = 'Unknown Tag'; }
            if (tagData.id || tagData.name !== 'Unknown Tag') {
              result.tags.push(tagData);
            }
          } catch (e) {
            // Skip this tag if conversion fails
          }
        }
      }
    } catch (e) {
      // Tags might fail to load
    }
    
    return JSON.stringify(result);
    
  } catch (error) {
    return JSON.stringify({
      error: true,
      message: error.message,
      code: 'SCRIPT_ERROR'
    });
  }
})();