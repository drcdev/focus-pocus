(() => {
  'use strict';
  
  // Utility function for safe property access - eliminates redundant try-catch blocks
  function safeGet(obj, prop, defaultValue = null) {
    try {
      // OmniFocus 4 requires function call syntax for property access
      const value = obj[prop]();
      return value !== undefined ? value : defaultValue;
    } catch (e) {
      // Fallback to direct property access for compatibility
      try {
        const directValue = obj[prop];
        return directValue !== undefined ? directValue : defaultValue;
      } catch (e2) {
        return defaultValue;
      }
    }
  }
  
  try {
    const app = Application('OmniFocus');
    app.includeStandardAdditions = true;
    
    if (!app.running()) {
      throw new Error('OmniFocus is not running');
    }
    
    const itemId = {{itemId}};
    const tagIds = {{tagIds}};
    const itemType = {{itemType}};
    
    // Try using OmniFocus JXA API with Application.add() method as seen in forum
    const doc = app.defaultDocument;
    let item = null;
    let assignedCount = 0;
    
    // Find the item
    try {
      if (itemType === 'task' || !itemType) {
        item = doc.flattenedTasks.byId(itemId);
      } else {
        item = doc.flattenedProjects.byId(itemId);
      }
    } catch (e) {
      throw new Error('Item not found');
    }
    
    if (!item || !safeGet(item, 'id')) {
      throw new Error('Item not found');
    }
    
    // Get tags to assign by iterating through all tags (byId doesn't work reliably)
    const tagsToAssign = [];
    const debugInfo = [];
    
    try {
      const allTags = doc.flattenedTags;
      
      for (const requestedTagId of tagIds) {
        let foundTag = null;
        
        for (let i = 0; i < allTags.length; i++) {
          const tag = allTags[i];
          try {
            if (safeGet(tag, 'id') === requestedTagId) {
              foundTag = tag;
              break;
            }
          } catch (e) {
            // Skip tags that can't be accessed
          }
        }
        
        if (foundTag) {
          tagsToAssign.push(foundTag);
          debugInfo.push(`Found tag: ${safeGet(foundTag, 'name', 'Unknown')} (${safeGet(foundTag, 'id', 'Unknown')})`);
        } else {
          debugInfo.push(`Tag not found for ID: ${requestedTagId}`);
        }
      }
    } catch (e) {
      throw new Error(`Failed to search for tags: ${e.message}`);
    }
    
    // Optional: Log debug info if needed
    // for (const info of debugInfo) {
    //   console.log(info);
    // }
    
    // Use Application.add() method as suggested in forum discussion
    if (tagsToAssign.length > 0) {
      try {
        for (let i = 0; i < tagsToAssign.length; i++) {
          const tag = tagsToAssign[i];
          try {
            app.add(tag, { to: item.tags });
            assignedCount++;
          } catch (tagError) {
            // Skip individual tag errors but continue with others
            // console.log(`Warning: Failed to assign tag ${i}: ${tagError.message}`);
          }
        }
      } catch (e) {
        throw new Error(`Failed to assign tags using app.add(): ${e.message}`);
      }
    }
    
    return JSON.stringify({ 
      success: true, 
      assignedCount: assignedCount,
      message: `Successfully assigned ${assignedCount} tag(s) using Application.add() method`
    });
    
  } catch (error) {
    return JSON.stringify({
      error: true,
      message: error.message,
      code: 'SCRIPT_ERROR'
    });
  }
})();
