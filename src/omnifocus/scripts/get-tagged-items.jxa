(() => {
  'use strict';
  
  // Utility function for safe property access - eliminates redundant try-catch blocks
  function safeGet(obj, prop, defaultValue = null) {
    try {
      // Direct property access is faster and more reliable in OmniFocus 4
      const value = obj[prop];
      return value !== undefined ? value : defaultValue;
    } catch (e) {
      return defaultValue;
    }
  }
  
  // Utility function for safe date conversion
  function safeDate(dateValue) {
    if (!dateValue) return null;
    try {
      return dateValue.toISOString();
    } catch (e) {
      return null;
    }
  }
  
  try {
    const app = Application('OmniFocus');
    app.includeStandardAdditions = true;
    
    if (!app.running()) {
      throw new Error('OmniFocus is not running');
    }
    
    const tagId = {{tagId}};
    const itemType = {{itemType}};
    const doc = app.defaultDocument;
    
    const tag = doc.flattenedTags.byId(tagId);
    if (!tag || !safeGet(tag, 'id')) {
      throw new Error('Tag not found');
    }
    
    const result = { tasks: [], projects: [] };
    
    // Get tasks if requested
    if (itemType === 'all' || itemType === 'tasks') {
      try {
        const tasks = doc.flattenedTasks.whose({ tags: { _contains: tag } });
        for (let i = 0; i < tasks.length; i++) {
          const task = tasks[i];
          try {
            const taskData = {
              id: safeGet(task, 'id'),
              name: safeGet(task, 'name'),
              note: safeGet(task, 'note', ''),
              completed: safeGet(task, 'completed', false),
              completionDate: safeDate(safeGet(task, 'completionDate')),
              dueDate: safeDate(safeGet(task, 'dueDate')),
              deferDate: safeDate(safeGet(task, 'deferDate')),
              flagged: safeGet(task, 'flagged', false),
              estimatedMinutes: safeGet(task, 'estimatedMinutes'),
              projectId: null,
              tags: []
            };
            
            // Get project ID safely
            const container = safeGet(task, 'assignedContainer');
            if (container) {
              taskData.projectId = safeGet(container, 'id');
            }
            
            // Get tags safely
            const taskTags = safeGet(task, 'tags');
            if (taskTags) {
              for (let j = 0; j < taskTags.length; j++) {
                const tagId = safeGet(taskTags[j], 'id');
                const tagName = safeGet(taskTags[j], 'name');
                if (tagId && tagName) {
                  taskData.tags.push({ id: tagId, name: tagName });
                }
              }
            }
            
            result.tasks.push(taskData);
          } catch (e) {
            // Skip task if it fails to process
          }
        }
      } catch (e) {
        // Tasks query failed
      }
    }
    
    // Get projects if requested
    if (itemType === 'all' || itemType === 'projects') {
      try {
        const projects = doc.flattenedProjects.whose({ tags: { _contains: tag } });
        for (let i = 0; i < projects.length; i++) {
          const project = projects[i];
          try {
            const projectData = {
              id: safeGet(project, 'id'),
              name: safeGet(project, 'name'),
              note: safeGet(project, 'note', ''),
              status: safeGet(project, 'status'),
              flagged: safeGet(project, 'flagged', false),
              dueDate: safeDate(safeGet(project, 'dueDate')),
              deferDate: safeDate(safeGet(project, 'deferDate')),
              completionDate: safeDate(safeGet(project, 'completionDate')),
              sequential: safeGet(project, 'sequential', false),
              estimatedMinutes: safeGet(project, 'estimatedMinutes'),
              taskCount: 0,
              availableTaskCount: 0,
              tags: []
            };
            
            // Get task counts safely
            const projectTasks = safeGet(project, 'tasks');
            const availableTasks = safeGet(project, 'availableTasks');
            projectData.taskCount = projectTasks ? projectTasks.length : 0;
            projectData.availableTaskCount = availableTasks ? availableTasks.length : 0;
            
            // Get tags safely
            const projectTags = safeGet(project, 'tags');
            if (projectTags) {
              for (let j = 0; j < projectTags.length; j++) {
                const tagId = safeGet(projectTags[j], 'id');
                const tagName = safeGet(projectTags[j], 'name');
                if (tagId && tagName) {
                  projectData.tags.push({ id: tagId, name: tagName });
                }
              }
            }
            
            result.projects.push(projectData);
          } catch (e) {
            // Skip project if it fails to process
          }
        }
      } catch (e) {
        // Projects query failed
      }
    }
    
    return JSON.stringify(result);
    
  } catch (error) {
    return JSON.stringify({
      error: true,
      message: error.message,
      code: 'SCRIPT_ERROR'
    });
  }
})();