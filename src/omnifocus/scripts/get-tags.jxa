(() => {
  'use strict';
  
  try {
    const app = Application('OmniFocus');
    app.includeStandardAdditions = true;
    
    if (!app.running()) {
      throw new Error('OmniFocus is not running');
    }
    
    const doc = app.defaultDocument;
    const flattenedTags = doc.flattenedTags;
    
    const tags = [];
    
    for (let i = 0; i < flattenedTags.length; i++) {
      const tag = flattenedTags[i];
      
      try {
        const tagData = {
          id: tag.id(),
          name: tag.name(),
          parentTagId: null,
          allowsNextAction: tag.allowsNextAction(),
          active: tag.active(),
          creationDate: tag.creationDate().toISOString(),
          modificationDate: tag.modificationDate().toISOString(),
          usedCount: 0
        };
        
        // Get parent tag
        const parentTag = tag.parent();
        if (parentTag && parentTag.constructor.name === 'Tag') {
          tagData.parentTagId = parentTag.id();
        }
        
        // Calculate usage count (approximate)
        try {
          const taggedTasks = doc.flattenedTasks.whose({tags: {_contains: tag}});
          const taggedProjects = doc.flattenedProjects.whose({tags: {_contains: tag}});
          tagData.usedCount = (taggedTasks ? taggedTasks.length : 0) + (taggedProjects ? taggedProjects.length : 0);
        } catch (countError) {
          // If count fails, leave as 0
        }
        
        tags.push(tagData);
      } catch (tagError) {
        // Skip individual tag errors but continue processing
        console.log('Error processing tag:', tagError.message);
      }
    }
    
    return JSON.stringify(tags);
    
  } catch (error) {
    return JSON.stringify({
      error: true,
      message: error.message,
      code: 'SCRIPT_ERROR'
    });
  }
})();