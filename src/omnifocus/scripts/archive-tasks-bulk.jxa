(() => {
  'use strict';
  
  // Utility function for safe property access - eliminates redundant try-catch blocks
  function safeGet(obj, prop, defaultValue = null) {
    try {
      // OmniFocus 4 requires function call syntax for property access
      const value = obj[prop]();
      return value !== undefined ? value : defaultValue;
    } catch (e) {
      // Fallback to direct property access for compatibility
      try {
        const directValue = obj[prop];
        return directValue !== undefined ? directValue : defaultValue;
      } catch (e2) {
        return defaultValue;
      }
    }
  }
  
  // Utility function for safe date conversion
  function safeDate(dateValue) {
    if (!dateValue) return null;
    try {
      return dateValue.toISOString();
    } catch (e) {
      return null;
    }
  }
  
  try {
    const app = Application('OmniFocus');
    app.includeStandardAdditions = true;
    
    if (!app.running()) {
      throw new Error('OmniFocus is not running');
    }
    
    const taskIds = {{taskIds}};
    const doc = app.defaultDocument;
    
    const archived = [];
    const failed = [];
    
    // Get or create archive tag
    let archiveTag = doc.flattenedTags.whose({ name: 'Archive' })[0];
    if (!archiveTag) {
      archiveTag = app.Tag({ name: 'Archive' });
      doc.tags.push(archiveTag);
    }
    
    for (const taskId of taskIds) {
      try {
        const task = doc.flattenedTasks.byId(taskId);
        if (!task || !task.id()) {
          failed.push(taskId);
          continue;
        }
        
        // Archive by completing the task
        task.completed = true;
        task.completionDate = new Date();
        
        // Add archive tag
        const currentTags = task.tags();
        currentTags.push(archiveTag);
        task.tags = currentTags;
        
        archived.push(taskId);
      } catch (e) {
        failed.push(taskId);
      }
    }
    
    return JSON.stringify({
      archived: archived,
      failed: failed
    });
    
  } catch (error) {
    return JSON.stringify({
      error: true,
      message: error.message,
      code: 'SCRIPT_ERROR',
      archived: [],
      failed: {{taskIds}} || []
    });
  }
})();