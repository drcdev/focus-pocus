(() => {
  'use strict';
  
  // Utility function for safe property access - eliminates redundant try-catch blocks
  function safeGet(obj, prop, defaultValue = null) {
    try {
      // OmniFocus 4 requires function call syntax for property access
      const value = obj[prop]();
      return value !== undefined ? value : defaultValue;
    } catch (e) {
      // Fallback to direct property access for compatibility
      try {
        const directValue = obj[prop];
        return directValue !== undefined ? directValue : defaultValue;
      } catch (e2) {
        return defaultValue;
      }
    }
  }
  
  // Utility function for safe date conversion
  function safeDate(dateValue) {
    if (!dateValue) return null;
    try {
      return dateValue.toISOString();
    } catch (e) {
      return null;
    }
  }
  
  try {
    const app = Application('OmniFocus');
    app.includeStandardAdditions = true;
    
    if (!app.running()) {
      throw new Error('OmniFocus is not running');
    }
    
    const taskId = {{taskId}};
    if (!taskId) {
      throw new Error('Task ID is required');
    }
    
    const doc = app.defaultDocument;
    
    // Use the efficient byId method instead of iterating all tasks
    let foundTask = null;
    try {
      foundTask = doc.flattenedTasks.byId(taskId);
      if (!foundTask || !foundTask.id()) {
        throw new Error('Task not found');
      }
    } catch (e) {
      // Task not found or invalid ID
      return JSON.stringify({
        error: true,
        message: 'Task not found',
        code: 'NOT_FOUND'
      });
    }
    
    // Build task data with optimized property access
    const taskData = {
      id: safeGet(foundTask, 'id'),
      name: safeGet(foundTask, 'name', 'Unknown Task'),
      note: safeGet(foundTask, 'note'),
      completed: safeGet(foundTask, 'completed', false),
      completionDate: safeDate(safeGet(foundTask, 'completionDate')),
      creationDate: safeDate(safeGet(foundTask, 'creationDate')),
      modificationDate: safeDate(safeGet(foundTask, 'modificationDate')),
      dueDate: safeDate(safeGet(foundTask, 'dueDate')),
      deferDate: safeDate(safeGet(foundTask, 'deferDate')),
      estimatedMinutes: safeGet(foundTask, 'estimatedMinutes'),
      flagged: safeGet(foundTask, 'flagged', false),
      repetitionRule: null,
      tags: [],
      projectId: null,
      parentTaskId: null,
      containingProjectInfo: null
    };
    
    // Handle repetition rule conversion
    const repRule = safeGet(foundTask, 'repetitionRule');
    if (repRule) {
      try {
        taskData.repetitionRule = repRule.toString();
      } catch (e) {
        taskData.repetitionRule = null;
      }
    }
    
    // Get tags efficiently
    try {
      const taskTags = foundTask.tags();
      if (taskTags && taskTags.length > 0) {
        for (let j = 0; j < taskTags.length; j++) {
          const tagName = safeGet(taskTags[j], 'name');
          if (tagName) taskData.tags.push(tagName);
        }
      }
    } catch (e) {
      // Tags not accessible
    }
    
    // Get containing project efficiently
    try {
      const containingProject = foundTask.containingProject();
      if (containingProject) {
        const projectId = safeGet(containingProject, 'id');
        if (projectId) {
          taskData.projectId = projectId;
          taskData.containingProjectInfo = {
            id: projectId,
            name: safeGet(containingProject, 'name', 'Unknown Project'),
            status: safeGet(containingProject, 'status', 'active')
          };
        }
      }
    } catch (e) {
      // Project info might not be accessible
    }
    
    // Get parent task efficiently
    try {
      const parentTask = foundTask.parentTask();
      if (parentTask) {
        taskData.parentTaskId = safeGet(parentTask, 'id');
      }
    } catch (e) {
      // Parent task info might not be accessible
    }
    
    return JSON.stringify(taskData);
    
  } catch (error) {
    return JSON.stringify({
      error: true,
      message: error.message,
      code: 'SCRIPT_ERROR'
    });
  }
})();