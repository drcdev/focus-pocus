(() => {
  'use strict';
  
  try {
    const app = Application('OmniFocus 4');
    app.includeStandardAdditions = true;
    
    if (!app.running()) {
      throw new Error('OmniFocus 4 is not running');
    }
    
    const taskId = {{taskId}};
    if (!taskId) {
      throw new Error('Task ID is required');
    }
    
    const doc = app.defaultDocument;
    
    // Try to find the task by ID
    let foundTask = null;
    const flattenedTasks = doc.flattenedTasks;
    
    for (let i = 0; i < flattenedTasks.length; i++) {
      const task = flattenedTasks[i];
      if (task.id() === taskId) {
        foundTask = task;
        break;
      }
    }
    
    if (!foundTask) {
      return JSON.stringify({
        error: true,
        message: 'Task not found',
        code: 'NOT_FOUND'
      });
    }
    
    const taskData = {
      id: foundTask.id(),
      name: foundTask.name(),
      note: foundTask.note() || null,
      completed: foundTask.completed(),
      completionDate: foundTask.completionDate() ? foundTask.completionDate().toISOString() : null,
      creationDate: foundTask.creationDate().toISOString(),
      modificationDate: foundTask.modificationDate().toISOString(),
      dueDate: foundTask.dueDate() ? foundTask.dueDate().toISOString() : null,
      deferDate: foundTask.deferDate() ? foundTask.deferDate().toISOString() : null,
      estimatedMinutes: foundTask.estimatedMinutes() || null,
      flagged: foundTask.flagged(),
      repetitionRule: foundTask.repetitionRule() ? foundTask.repetitionRule().toString() : null,
      tags: [],
      projectId: null,
      parentTaskId: null,
      containingProjectInfo: null
    };
    
    // Get tags
    const taskTags = foundTask.tags();
    if (taskTags && taskTags.length > 0) {
      for (let j = 0; j < taskTags.length; j++) {
        taskData.tags.push(taskTags[j].name());
      }
    }
    
    // Get containing project
    const containingProject = foundTask.containingProject();
    if (containingProject) {
      taskData.projectId = containingProject.id();
      taskData.containingProjectInfo = {
        id: containingProject.id(),
        name: containingProject.name(),
        status: containingProject.status()
      };
    }
    
    // Get parent task
    const parentTask = foundTask.parentTask();
    if (parentTask) {
      taskData.parentTaskId = parentTask.id();
    }
    
    return JSON.stringify(taskData);
    
  } catch (error) {
    return JSON.stringify({
      error: true,
      message: error.message,
      code: 'SCRIPT_ERROR'
    });
  }
})();