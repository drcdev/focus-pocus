(() => {
  'use strict';
  
  // Utility function for safe property access - eliminates redundant try-catch blocks
  function safeGet(obj, prop, defaultValue = null) {
    try {
      // OmniFocus 4 requires function call syntax for property access
      const value = obj[prop]();
      return value !== undefined ? value : defaultValue;
    } catch (e) {
      // Fallback to direct property access for compatibility
      try {
        const directValue = obj[prop];
        return directValue !== undefined ? directValue : defaultValue;
      } catch (e2) {
        return defaultValue;
      }
    }
  }
  
  // Utility function for safe date conversion
  function safeDate(dateValue) {
    if (!dateValue) return null;
    try {
      return dateValue.toISOString();
    } catch (e) {
      return null;
    }
  }
  
  try {
    const app = Application('OmniFocus');
    app.includeStandardAdditions = true;
    
    if (!app.running()) {
      throw new Error('OmniFocus is not running');
    }
    
    const tagId = {{tagId}};
    const newName = {{newName}};
    const doc = app.defaultDocument;
    
    const tag = doc.flattenedTags.byId(tagId);
    if (!tag || !safeGet(tag, 'id')) {
      throw new Error('Tag not found');
    }
    
    // Update the tag name
    tag.name = newName;
    
    const result = {
      id: safeGet(tag, 'id'),
      name: safeGet(tag, 'name'),
      parentTagId: null,
      availableTaskCount: 0,
      remainingTaskCount: 0
    };
    
    // Get parent tag safely
    const container = safeGet(tag, 'container');
    if (container && safeGet(container, 'class') === 'tag') {
      result.parentTagId = safeGet(container, 'id');
    }
    
    // Get task counts safely
    result.availableTaskCount = safeGet(tag, 'availableTaskCount', 0);
    result.remainingTaskCount = safeGet(tag, 'remainingTaskCount', 0);
    
    return JSON.stringify(result);
    
  } catch (error) {
    return JSON.stringify({
      error: true,
      message: error.message,
      code: 'SCRIPT_ERROR'
    });
  }
})();