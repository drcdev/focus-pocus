(() => {
  'use strict';
  
  // Utility function for safe property access - eliminates redundant try-catch blocks
  function safeGet(obj, prop, defaultValue = null) {
    try {
      // OmniFocus 4 requires function call syntax for property access
      const value = obj[prop]();
      return value !== undefined ? value : defaultValue;
    } catch (e) {
      // Fallback to direct property access for compatibility
      try {
        const directValue = obj[prop];
        return directValue !== undefined ? directValue : defaultValue;
      } catch (e2) {
        return defaultValue;
      }
    }
  }
  
  // Utility function for safe date conversion
  function safeDate(dateValue) {
    if (!dateValue) return null;
    try {
      return dateValue.toISOString();
    } catch (e) {
      return null;
    }
  }
  
  try {
    const app = Application('OmniFocus');
    app.includeStandardAdditions = true;
    
    if (!app.running()) {
      throw new Error('OmniFocus is not running');
    }
    
    const doc = app.defaultDocument;
    const tags = [];
    
    try {
      const allTags = doc.flattenedTags;
      
      for (let i = 0; i < allTags.length; i++) {
        const tag = allTags[i];
        try {
          const tagData = {
            id: safeGet(tag, 'id'),
            name: safeGet(tag, 'name', 'Unknown Tag'),
            parentTagId: null,
            availableTaskCount: 0,
            remainingTaskCount: 0
          };
          
          // Get parent tag safely
          const container = safeGet(tag, 'container');
          if (container && safeGet(container, 'id')) {
            tagData.parentTagId = safeGet(container, 'id');
          }
          
          // Get task counts safely
          tagData.availableTaskCount = safeGet(tag, 'availableTaskCount', 0);
          tagData.remainingTaskCount = safeGet(tag, 'remainingTaskCount', 0);
          
          // Always add tags - even if property extraction fails, we want to see the issue
          tags.push(tagData);
        } catch (e) {
          // Skip tag if it fails to process
        }
      }
    } catch (e) {
      // All tags query failed
    }
    
    return JSON.stringify(tags);
    
  } catch (error) {
    return JSON.stringify({
      error: true,
      message: error.message,
      code: 'SCRIPT_ERROR'
    });
  }
})();